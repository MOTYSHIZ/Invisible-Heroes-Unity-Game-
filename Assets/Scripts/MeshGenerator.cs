using UnityEngine;
using System.Collections;


///<summary>
///Generates a mesh for the map by using a given heightMap from the MapGenerator class.
///</summary>
public static class MeshGenerator{

    /// <summary>
    /// Generates a mesh for the map by using a given heightMap from the MapGenerator class.
    /// </summary>
    /// <param name="heightMap">The heightmap to determine the height of each of the mesh's vertices.</param>
    /// <param name="heightMultiplier">Scales the height of the mesh by multiplying off of the heightmap's data.</param>
    /// <param name="heightCurve">AnimationCurve used for more nuanced control over how the heightMultiplier affects the mesh at different heights.</param>
    /// <param name="levelOfDetail">The LOD reduction factor. (The value of levelOfDetail is actually half the amount of map width indices skipped for generating the mesh.)</param>
    /// <returns></returns>
    public static MeshData GenerateTerrainMesh(float[,] heightMap, float heightMultiplier, AnimationCurve heightCurve, int levelOfDetail)
    {
        int width = heightMap.GetLength(0);
        int height = heightMap.GetLength(1);

        //Offset values for centering the mesh.
        float topLeftX = (width - 1) / -2f;
        float topLeftZ = (height - 1) / 2f;

        //Determine how many map indices to skip to generate a mesh at a given LOD factor.
        int meshSimplificationIncrement = (levelOfDetail == 0)?1:levelOfDetail * 2;
        int verticesPerLine = (width - 1) / meshSimplificationIncrement + 1;


        MeshData meshData = new MeshData(verticesPerLine, verticesPerLine);    //Data for a new mesh.
        int vertexIndex = 0;                //Position in vertices array


        //Loop through and determine which vertices get into the triangles array, and determine height of each vertex.
        for (int y = 0; y < height; y += meshSimplificationIncrement)
        {
            for (int x = 0; x < width; x += meshSimplificationIncrement)
            {
                //heightcurve gives more control over how the heightmultiplier affects vertices at different height ranges.
                //heightmultiplier acts as a scalar for the vertex heights.
                meshData.vertices[vertexIndex] = new Vector3(topLeftX + x, heightCurve.Evaluate(heightMap[x, y]) * heightMultiplier, topLeftZ - y);
                meshData.uvs[vertexIndex] = new Vector2(x/(float)width, y/(float)height);

                //if topLeft vertex for a (square)triangle section is not a boundary value, add the triangle section to the triangles array.
                if (x < width - 1 && y < height - 1)
                {
                    meshData.AddTriangle(vertexIndex, vertexIndex + verticesPerLine + 1, vertexIndex + verticesPerLine);    //Add a vertex, a vertex below and the right of it, and the vertex below it.
                    meshData.AddTriangle(vertexIndex + verticesPerLine + 1, vertexIndex, vertexIndex + 1);    //Add a vertex's below and right neighbor, the vertex, and the vertex's right neighbor. 
                }
                vertexIndex++;
            }
        }

        return meshData;
    }

}

/// <summary>
/// Contains all the information needed to form a map mesh.
/// </summary>
public class MeshData
{
    public Vector3[] vertices;
    public int[] triangles;
    public Vector2[] uvs;

    //Position in the triangles array.
    int triangleIndex;

    /// <summary>
    /// Constructor for MeshData Object. Instantiates and sets bounds for internal arrays.
    /// </summary>
    /// <param name="meshWidth">Width of the Mesh</param>
    /// <param name="meshHeight">Height of the Mesh</param>
    public MeshData(int meshWidth, int meshHeight)
    {
        vertices = new Vector3[meshWidth * meshHeight];
        uvs = new Vector2[meshWidth * meshHeight];
        triangles = new int[(meshWidth - 1) * (meshHeight - 1) * 6];
    }

    /// <summary>
    /// Adds a triangle's vertices to the triangles array.
    /// </summary>
    /// <param name="a">First triangle vertex.</param>
    /// <param name="b">Second triangle vertex.</param>
    /// <param name="c">Third triangle vertex.</param>
    public void AddTriangle(int a, int b, int c)
    {
        triangles[triangleIndex] = a;
        triangles[triangleIndex + 1] = b;
        triangles[triangleIndex + 2] = c;
        triangleIndex += 3;
    }

    /// <summary>
    /// Assigns all generated array values to a newly created mesh.
    /// </summary>
    /// <returns>Mesh with all of the Vertices, Triangles, and UV information generated by the class.</returns>
    public Mesh CreateMesh()
    {
        Mesh mesh = new Mesh();
        mesh.vertices = vertices;
        mesh.triangles = triangles;
        mesh.uv = uvs;
        mesh.RecalculateNormals();
        return mesh;
    }
}